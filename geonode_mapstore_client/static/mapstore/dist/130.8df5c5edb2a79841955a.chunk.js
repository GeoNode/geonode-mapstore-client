(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[130,7743],{7:(e,r,t)=>{var o=t(43677),n=t(3465).point;e.exports=function(e){var r=o(e),t=(r[0]+r[2])/2,a=(r[1]+r[3])/2;return n([t,a])}},43677:(e,r,t)=>{var o=t(71594).pZ;e.exports=function(e){var r=[1/0,1/0,-1/0,-1/0];return o(e,(function(e){r[0]>e[0]&&(r[0]=e[0]),r[1]>e[1]&&(r[1]=e[1]),r[2]<e[0]&&(r[2]=e[0]),r[3]<e[1]&&(r[3]=e[1])})),r}},60720:(e,r,t)=>{var o=t(4768).getCoord,n=t(3465).radiansToDistance;e.exports=function(e,r,t){var a=Math.PI/180,i=o(e),s=o(r),u=a*(s[1]-i[1]),f=a*(s[0]-i[0]),y=a*i[1],c=a*s[1],p=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(f/2),2)*Math.cos(y)*Math.cos(c);return n(2*Math.atan2(Math.sqrt(p),Math.sqrt(1-p)),t)}},22543:(e,r,t)=>{var o=t(3465).featureCollection,n=t(71594).pZ,a=t(3465).point;e.exports=function(e){var r=[];return n(e,(function(e){r.push(a(e))})),o(r)}},3465:e=>{e.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return function(e,r){return{type:"Feature",properties:r||{},geometry:e}}({type:"Point",coordinates:e.slice()},r)},e.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}};var r={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};e.exports.radiansToDistance=function(e,t){var o=r[t||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e*o}},78576:(e,r,t)=>{var o=t(4768);function n(e,r){for(var t=!1,o=0,n=r.length-1;o<r.length;n=o++){var a=r[o][0],i=r[o][1],s=r[n][0],u=r[n][1];i>e[1]!=u>e[1]&&e[0]<(s-a)*(e[1]-i)/(u-i)+a&&(t=!t)}return t}e.exports=function(e,r){var t=o.getCoord(e),a=r.geometry.coordinates;"Polygon"===r.geometry.type&&(a=[a]);for(var i=0,s=!1;i<a.length&&!s;i++)if(n(t,a[i][0])){for(var u=!1,f=1;f<a[i].length&&!u;)n(t,a[i][f])&&(u=!0),f++;u||(s=!0)}return s}},4768:e=>{e.exports.geojsonType=function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)},e.exports.collectionOf=function(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}},e.exports.featureOf=function(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)},e.exports.getCoord=function(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}},60130:(e,r,t)=>{var o=t(3465).featureCollection,n=t(7),a=t(60720),i=t(78576),s=t(22543);function u(e,r,t,o,n,a){if(Math.sqrt((n-t)*(n-t)+(a-o)*(a-o))===Math.sqrt((e-t)*(e-t)+(r-o)*(r-o))+Math.sqrt((n-e)*(n-e)+(a-r)*(a-r)))return!0}e.exports=function(e){"FeatureCollection"!==e.type&&("Feature"!==e.type&&(e={type:"Feature",geometry:e,properties:{}}),e=o([e]));for(var r=n(e),t=!1,f=0;!t&&f<e.features.length;){var y,c=e.features[f].geometry,p=!1;if("Point"===c.type)r.geometry.coordinates[0]===c.coordinates[0]&&r.geometry.coordinates[1]===c.coordinates[1]&&(t=!0);else if("MultiPoint"===c.type){var l=!1;for(y=0;!l&&y<c.coordinates.length;)r.geometry.coordinates[0]===c.coordinates[y][0]&&r.geometry.coordinates[1]===c.coordinates[y][1]&&(t=!0,l=!0),y++}else if("LineString"===c.type)for(y=0;!p&&y<c.coordinates.length-1;)u(r.geometry.coordinates[0],r.geometry.coordinates[1],c.coordinates[y][0],c.coordinates[y][1],c.coordinates[y+1][0],c.coordinates[y+1][1])&&(p=!0,t=!0),y++;else if("MultiLineString"===c.type)for(var g=0;g<c.coordinates.length;){p=!1,y=0;for(var d=c.coordinates[g];!p&&y<d.length-1;)u(r.geometry.coordinates[0],r.geometry.coordinates[1],d[y][0],d[y][1],d[y+1][0],d[y+1][1])&&(p=!0,t=!0),y++;g++}else"Polygon"!==c.type&&"MultiPolygon"!==c.type||i(r,{type:"Feature",geometry:c,properties:{}})&&(t=!0);f++}if(t)return r;var m,h=o([]);for(f=0;f<e.features.length;f++)h.features=h.features.concat(s(e.features[f]).features);var v=1/0;for(f=0;f<h.features.length;f++){var w=a(r,h.features[f],"miles");w<v&&(v=w,m=h.features[f])}return m}}}]);