"use strict";(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[36128],{498217:(e,t,r)=>{r.d(t,{Ay:()=>i,hX:()=>a});var o=r(104087),n=r(207434);const i=class{constructor(){this.dataProjection=void 0,this.defaultFeatureProjection=void 0,this.supportedMediaTypes=null}getReadOptions(e,t){if(t){let r=t.dataProjection?(0,n.Jt)(t.dataProjection):this.readProjection(e);t.extent&&r&&"tile-pixels"===r.getUnits()&&(r=(0,n.Jt)(r),r.setWorldExtent(t.extent)),t={dataProjection:r,featureProjection:t.featureProjection}}return this.adaptOptions(t)}adaptOptions(e){return Object.assign({dataProjection:this.dataProjection,featureProjection:this.defaultFeatureProjection},e)}getType(){return(0,o.b0)()}readFeature(e,t){return(0,o.b0)()}readFeatures(e,t){return(0,o.b0)()}readGeometry(e,t){return(0,o.b0)()}readProjection(e){return(0,o.b0)()}writeFeature(e,t){return(0,o.b0)()}writeFeatures(e,t){return(0,o.b0)()}writeGeometry(e,t){return(0,o.b0)()}};function a(e,t,r){const o=r?(0,n.Jt)(r.featureProjection):null,i=r?(0,n.Jt)(r.dataProjection):null;let a;if(a=o&&i&&!(0,n.tI)(o,i)?(t?e.clone():e).transform(t?o:i,t?i:o):e,t&&r&&void 0!==r.decimals){const t=Math.pow(10,r.decimals),o=function(e){for(let r=0,o=e.length;r<o;++r)e[r]=Math.round(e[r]*t)/t;return e};a===e&&(a=e.clone()),a.applyTransform(o)}return a}},736128:(e,t,r)=>{r.d(t,{A:()=>h});var o=r(786717),n=r(334338),i=r(762283),a=r(611217),s=r(496702),u=r(330503),c=r(502871),d=r(644294),l=r(934142),p=r(190588),m=r(207434),y=r(643530),g=r(498217);class b extends i.A{constructor(e){e=e||{},super(),this.dataProjection=(0,m.Jt)(e.dataProjection?e.dataProjection:"EPSG:4326"),e.featureProjection&&(this.defaultFeatureProjection=(0,m.Jt)(e.featureProjection)),this.geometryName_=e.geometryName,this.extractGeometryName_=e.extractGeometryName,this.supportedMediaTypes=["application/geo+json","application/vnd.geo+json"]}readFeatureFromObject(e,t){let r=null;r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null};const n=j(r.geometry,t),i=new o.A;return this.geometryName_?i.setGeometryName(this.geometryName_):this.extractGeometryName_&&"geometry_name"in r!==void 0&&i.setGeometryName(r.geometry_name),i.setGeometry(n),"id"in r&&i.setId(r.id),r.properties&&i.setProperties(r.properties,!0),i}readFeaturesFromObject(e,t){let r=null;if("FeatureCollection"===e.type){r=[];const o=e.features;for(let e=0,n=o.length;e<n;++e)r.push(this.readFeatureFromObject(o[e],t))}else r=[this.readFeatureFromObject(e,t)];return r}readGeometryFromObject(e,t){return j(e,t)}readProjectionFromObject(e){const t=e.crs;let r;return t?"name"==t.type?r=(0,m.Jt)(t.properties.name):"EPSG"===t.type?r=(0,m.Jt)("EPSG:"+t.properties.code):(0,p.v)(!1,36):r=this.dataProjection,r}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={type:"Feature",geometry:null,properties:null},o=e.getId();if(void 0!==o&&(r.id=o),!e.hasProperties())return r;const n=e.getProperties(),i=e.getGeometry();return i&&(r.geometry=f(i,t),delete n[e.getGeometryName()]),(0,y.p)(n)||(r.properties=n),r}writeFeaturesObject(e,t){t=this.adaptOptions(t);const r=[];for(let o=0,n=e.length;o<n;++o)r.push(this.writeFeatureObject(e[o],t));return{type:"FeatureCollection",features:r}}writeGeometryObject(e,t){return f(e,this.adaptOptions(t))}}function j(e,t){if(!e)return null;let r;switch(e.type){case"Point":r=function(e){return new d.A(e.coordinates)}(e);break;case"LineString":r=function(e){return new a.A(e.coordinates)}(e);break;case"Polygon":r=function(e){return new l.Ay(e.coordinates)}(e);break;case"MultiPoint":r=function(e){return new u.A(e.coordinates)}(e);break;case"MultiLineString":r=function(e){return new s.A(e.coordinates)}(e);break;case"MultiPolygon":r=function(e){return new c.A(e.coordinates)}(e);break;case"GeometryCollection":r=function(e){const t=e.geometries.map((function(e){return j(e,undefined)}));return new n.A(t)}(e);break;default:throw new Error("Unsupported GeoJSON type: "+e.type)}return(0,g.hX)(r,!1,t)}function f(e,t){const r=(e=(0,g.hX)(e,!0,t)).getType();let o;switch(r){case"Point":o=function(e){return{type:"Point",coordinates:e.getCoordinates()}}(e);break;case"LineString":o=function(e){return{type:"LineString",coordinates:e.getCoordinates()}}(e);break;case"Polygon":o=function(e,t){let r;return t&&(r=t.rightHanded),{type:"Polygon",coordinates:e.getCoordinates(r)}}(e,t);break;case"MultiPoint":o=function(e){return{type:"MultiPoint",coordinates:e.getCoordinates()}}(e);break;case"MultiLineString":o=function(e){return{type:"MultiLineString",coordinates:e.getCoordinates()}}(e);break;case"MultiPolygon":o=function(e,t){let r;return t&&(r=t.rightHanded),{type:"MultiPolygon",coordinates:e.getCoordinates(r)}}(e,t);break;case"GeometryCollection":o=function(e,t){delete(t=Object.assign({},t)).featureProjection;return{type:"GeometryCollection",geometries:e.getGeometriesArray().map((function(e){return f(e,t)}))}}(e,t);break;case"Circle":o={type:"GeometryCollection",geometries:[]};break;default:throw new Error("Unsupported geometry type: "+r)}return o}const h=b},762283:(e,t,r)=>{r.d(t,{A:()=>s});var o=r(498217),n=r(104087);class i extends o.Ay{constructor(){super()}getType(){return"json"}readFeature(e,t){return this.readFeatureFromObject(a(e),this.getReadOptions(e,t))}readFeatures(e,t){return this.readFeaturesFromObject(a(e),this.getReadOptions(e,t))}readFeatureFromObject(e,t){return(0,n.b0)()}readFeaturesFromObject(e,t){return(0,n.b0)()}readGeometry(e,t){return this.readGeometryFromObject(a(e),this.getReadOptions(e,t))}readGeometryFromObject(e,t){return(0,n.b0)()}readProjection(e){return this.readProjectionFromObject(a(e))}readProjectionFromObject(e){return(0,n.b0)()}writeFeature(e,t){return JSON.stringify(this.writeFeatureObject(e,t))}writeFeatureObject(e,t){return(0,n.b0)()}writeFeatures(e,t){return JSON.stringify(this.writeFeaturesObject(e,t))}writeFeaturesObject(e,t){return(0,n.b0)()}writeGeometry(e,t){return JSON.stringify(this.writeGeometryObject(e,t))}writeGeometryObject(e,t){return(0,n.b0)()}}function a(e){if("string"==typeof e){return JSON.parse(e)||null}return null!==e?e:null}const s=i}}]);