(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[40271],{640271:(r,e,t)=>{"use strict";t.d(e,{zL:()=>i,xm:()=>s,yu:()=>a,Tu:()=>u,uf:()=>l,_R:()=>d,tw:()=>c,DL:()=>f,lF:()=>m,vi:()=>h,Ht:()=>v});var o=6371008.8,n={centimeters:637100880,centimetres:637100880,degrees:57.22891354143274,feet:20902260.511392,inches:39.37*o,kilometers:6371.0088,kilometres:6371.0088,meters:o,metres:o,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:o/1852,radians:1,yards:6967335.223679999};function i(r,e,t){void 0===t&&(t={});var o={type:"Feature"};return(0===t.id||t.id)&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.properties=e||{},o.geometry=r,o}function s(r,e,t){if(void 0===t&&(t={}),!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!w(r[0])||!w(r[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:r},e,t)}function a(r,e,t){void 0===t&&(t={});for(var o=0,n=r;o<n.length;o++){var s=n[o];if(s.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<s[s.length-1].length;a++)if(s[s.length-1][a]!==s[0][a])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:r},e,t)}function u(r,e,t){if(void 0===t&&(t={}),r.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:r},e,t)}function l(r,e){void 0===e&&(e={});var t={type:"FeatureCollection"};return e.id&&(t.id=e.id),e.bbox&&(t.bbox=e.bbox),t.features=r,t}function d(r,e,t){return void 0===t&&(t={}),i({type:"MultiLineString",coordinates:r},e,t)}function c(r,e,t){return void 0===t&&(t={}),i({type:"MultiPolygon",coordinates:r},e,t)}function f(r,e){void 0===e&&(e="kilometers");var t=n[e];if(!t)throw new Error(e+" units is invalid");return r*t}function m(r,e){void 0===e&&(e="kilometers");var t=n[e];if(!t)throw new Error(e+" units is invalid");return r/t}function h(r){return r%(2*Math.PI)*180/Math.PI}function v(r){return r%360*Math.PI/180}function w(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}}}]);