"use strict";(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[90421],{337291:(e,t,r)=>{r.d(t,{n:()=>b});var n=r(45228),o=r.n(n);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach(function(t){u(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function u(e,t,r){return(t=function(e){var t=function(e){if("object"!=i(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==i(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var l=r(7157),c=r(181817),p=["url","typeName","queriableAttributes","outputFormat","predicate","staticFilter","blacklist","item","fromTextToFilter","returnFullData"],f=function(e){var t,r=e.searchText,n=e.staticFilter,o=e.blacklist,i=e.item,a=e.queriableAttributes,s=e.predicate,u=(0,l.bD)(n||"")(i),c=r.split(" ").filter(function(e){return e}).filter(function(e){return o.indexOf(e.toLowerCase())<0});return 0===c.length&&(c=r?[r]:[]),c.length>0&&(t="(".concat(c.map(function(e){return a.map(function(t){return"".concat(t," ").concat(s," '%").concat(e.replace("'","''"),"%'")}).join(" OR ")}).join(") AND (")).concat(")")),t?t.concat(u):u||null},w={nominatim:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{returnFullData:!1};return r(737369).A.geocode(e,t).then(function(e){return t.returnFullData?e:null===(r=e.data)?[]:r.map(function(e){return{properties:s({},e),id:e.osm_id,type:"Feature",bbox:e.boundingbox.map(function(e){return parseFloat(e)}).reduce(function(e,t,r){return e[function(e){switch(e){case 0:return 1;case 1:return 3;case 2:return 0;case 3:return 2;default:return-1}}(r)]=t,e},[]),geometry:e.geojson||{type:"Point",coordinates:[parseFloat(e.lon),parseFloat(e.lat)]}}});var r})},wfs:function(e,t){var r=t.url,n=t.typeName,i=t.queriableAttributes,a=void 0===i?[]:i,s=t.outputFormat,u=void 0===s?"application/json":s,l=t.predicate,w=void 0===l?"ILIKE":l,m=t.staticFilter,b=void 0===m?"":m,y=t.blacklist,d=void 0===y?[]:y,v=t.item,g=t.fromTextToFilter,h=void 0===g?f:g,P=t.returnFullData,O=void 0!==P&&P,x=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(t,p),F=h({searchText:e,staticFilter:b,blacklist:d,item:v,queriableAttributes:a,predicate:w});return c.Tf(r,o()({maxFeatures:10,typeName:n,outputFormat:u,cql_filter:F},x)).then(function(e){return O?e:e.features})}},m={setService:function(e,t){w[e]=t},getService:function(e){return w[e]?w[e]:null}},b={Services:w,Utils:m}},590421:(e,t,r)=>{r.d(t,{H6:()=>x,XM:()=>O});var n=r(23412),o=r.n(n),i=r(2296),a=r.n(i),s=r(400912),u=r.n(s),l=r(269843),c=r.n(l),p=r(45228),f=r.n(p),w=r(45388),m=r.n(w),b=r(337291),y=r(995531),d=r(989105);function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function h(e,t,r){return(t=function(e){var t=function(e){if("object"!=v(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==v(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var P=function(e){var t=e.searchText,r=void 0===t?"":t,n=e.queriableAttributes,o=void 0===n?[]:n,i=e.predicate,a=void 0===i?"ILIKE":i,s=u()(o),l=r.toLowerCase(),p="strToLowerCase(".concat(s,") ").concat(a," '%").concat(l,"%'");return c()(s)?"":"("+p+")"},O=function(e){return e.distinctUntilChanged(function(e){var t=e.value,r=e.currentPage,n=e.attribute,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return!(o.value!==t||o.currentPage!==r||o.attribute!==n)}).throttle(function(e){return m().Observable.timer(e.delayDebounce||0)}).merge(e.debounce(function(e){return m().Observable.timer(e.delayDebounce||0)})).distinctUntilChanged().switchMap(function(e){if(e.performFetch){var t=(0,d.H)({attribute:e.attribute,layerName:e.typeName,maxFeatures:e.maxFeatures,startIndex:(e.currentPage-1)*e.maxFeatures,value:e.value});return m().Observable.fromPromise(y.A.post(e.url,t,{timeout:6e4,headers:{Accept:"application/json","Content-Type":"application/xml"}}).then(function(e){return{fetchedData:e.data,busy:!1}})).catch(function(){return m().Observable.of({fetchedData:{values:[],size:0},busy:!1})}).startWith({busy:!0})}return m().Observable.of({fetchedData:{values:[],size:0},busy:!1})}).startWith({})},x=function(e){return m().Observable.merge(e.distinctUntilChanged(function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).value===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).value}).debounce(function(e){return m().Observable.timer(e.delayDebounce||0)}),e.distinctUntilChanged(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.filterProps,r=e.currentPage,n=arguments.length>1?arguments[1]:void 0,o=n.filterProps,i=n.currentPage;return t===o&&r===i})).switchMap(function(e){if(e.performFetch){var t=o().parse(e.url,!0),r="";(a()(t.pathname,"wfs")||a()(t.pathname,"wms")||a()(t.pathname,"ows")||a()(t.pathname,"wps"))&&(r=t.pathname.replace(/(wms|ows|wps|wfs)$/,"wfs")),t.query&&t.query.service&&delete t.query.service;var n=o().format(f()({},t,{search:null,pathname:r})),i=f()({},function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach(function(t){h(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({url:n,typeName:e.filterProps&&e.filterProps.typeName||"",predicate:e.filterProps&&e.filterProps.predicate||"ILIKE",blacklist:e.filterProps&&e.filterProps.blacklist||[],maxFeatures:e.filterProps&&e.filterProps.maxFeatures||3,queriableAttributes:e.filterProps&&e.filterProps.queriableAttributes||[],returnFullData:!0,startIndex:((e.currentPage||1)-1)*(e.filterProps&&e.filterProps.maxFeatures||3),outputFormat:"application/json",staticFilter:"",fromTextToFilter:P,item:{},timeout:6e4,headers:{Accept:"application/json","Content-Type":"application/xml"},srsName:e.filterProps&&e.filterProps.srsName||"EPSG:4326"},t.query));return m().Observable.fromPromise(b.n.Utils.getService("wfs")(e.value,i).then(function(t){return{fetchedData:{values:t.features.map(function(e){return e.properties}),size:t.totalFeatures,features:t.features,crs:e.filterProps&&e.filterProps.srsName||"EPSG:4326"},busy:!1}})).catch(function(){return m().Observable.of({fetchedData:{values:[],size:0,features:[]},busy:!1})}).startWith({busy:!0})}return m().Observable.of({fetchedData:{values:[],size:0,features:[]},busy:!1})}).startWith({})}},989105:(e,t,r)=>{r.d(t,{H:()=>a});var n=r(102685);function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}var i=(0,r(159452).A)({}).and,a=function(e){var t,r=e.layerName,a=e.layerFilter,s=e.attribute,u=e.maxFeatures,l=e.startIndex,c=e.value,p=c?'<ogc:PropertyIsLike matchCase="false" wildCard="*" singleChar="." escapeChar="!">   <ogc:PropertyName>'+s+"</ogc:PropertyName>   <ogc:Literal>*"+c+"*</ogc:Literal></ogc:PropertyIsLike>":"",f=a&&!a.disabled&&(0,n.R9)(a)?(0,n.hG)(a,"1.1.0","ogc"):[];return'<wps:Execute xmlns:wps="http://www.opengis.net/wps/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0.0" service="WPS" xsi:schemaLocation="http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd">  <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">gs:PagedUnique</ows:Identifier>  <wps:DataInputs>    <wps:Input>      <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">features</ows:Identifier>      <ows:Title xmlns:ows="http://www.opengis.net/ows/1.1">features</ows:Title>      <wps:Data />      <wps:Reference xmlns:xlink="http://www.w3.org/1999/xlink" mimeType="text/xml" xlink:href="http://geoserver/wfs" method="POST">        <wps:Body>         <wfs:GetFeature xmlns:wfs="http://www.opengis.net/wfs" service="WFS" version="1.0.0">           <wfs:Query typeName="'+r+'">'+(p.length>0||f.length>0?'<ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">'+i.apply(void 0,(t=f,function(e){if(Array.isArray(e))return o(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).concat([p]))+"</ogc:Filter>":"")+'             <ogc:SortBy xmlns:ogc="http://www.opengis.net/ogc">               <ogc:SortProperty>                 <ogc:PropertyName>'+s+'</ogc:PropertyName>               </ogc:SortProperty>             </ogc:SortBy>           </wfs:Query>         </wfs:GetFeature>       </wps:Body>     </wps:Reference>   </wps:Input>   <wps:Input>     <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">fieldName</ows:Identifier>     <ows:Title xmlns:ows="http://www.opengis.net/ows/1.1">fieldName</ows:Title>     <wps:Data>       <wps:LiteralData>'+s+'</wps:LiteralData>     </wps:Data>   </wps:Input>   <wps:Input>     <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">maxFeatures</ows:Identifier>     <ows:Title xmlns:ows="http://www.opengis.net/ows/1.1">maxFeatures</ows:Title>     <wps:Data>       <wps:LiteralData>'+u+'</wps:LiteralData>     </wps:Data>   </wps:Input>   <wps:Input>     <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">startIndex</ows:Identifier>     <ows:Title xmlns:ows="http://www.opengis.net/ows/1.1">startIndex</ows:Title>     <wps:Data>       <wps:LiteralData>'+l+'</wps:LiteralData>     </wps:Data>   </wps:Input> </wps:DataInputs> <wps:ResponseForm>   <wps:RawDataOutput mimeType="application/json">     <ows:Identifier xmlns:ows="http://www.opengis.net/ows/1.1">result</ows:Identifier>   </wps:RawDataOutput> </wps:ResponseForm></wps:Execute>'}}}]);